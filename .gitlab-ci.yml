stages:
  - build
  - test
  - package
  - deploy_to_dockerhub
  - kubernetes-deploy

image: maven:3-jdk-8


variables:
  PRODUCTION_DOMAIN: http://localhost:8040/
  MAVEN_OPTS: -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2
  MAVEN_OPTS: -Dmaven.repo.local=/cache/maven.repository

cache:
  key: "$CI_BUILD_STAGE"
  paths:
    - .m2/

before_script:
  - export JAVA_HOME="/usr/lib/jvm/jre-1.8.0-openjdk"
  - export MAVEN_USER_HOME=`pwd`/.maven
  - chmod +x mvnw
  #- ./mvnw com.github.eirslett:frontend-maven-plugin:install-node-and-npm -DnodeVersion=v10.13.0 -DnpmVersion=6.4.1 -Dmaven.repo.local=$MAVEN_USER_HOME
  #- ./mvnw com.github.eirslett:frontend-maven-plugin:npm -Dmaven.repo.local=$MAVEN_USER_HOME

maven-compile:
  stage: build
  only:
    - master
    - merge_requests
  script:
    - ./mvnw compile -Dmaven.repo.local=$MAVEN_USER_HOME
  artifacts:
    paths:
        - target/classes/
        - target/generated-sources/
  only:
    - schedules
  before_script:
    - echo "this job is going to build project"

maven-test:
  stage: test
  only:
    - master
    - merge_requests
  script:
    - ./mvnw test -Dmaven.repo.local=$MAVEN_USER_HOME
  artifacts:
    reports:
      junit: target/surefire-reports/TEST-*.xml
    paths:
      - target/*.jar
  only:
    - schedules
  before_script:
    - echo "this job is going to test project"

maven-package:
  stage: package
  only:
    - master
    - merge_requests
  script:
    - ./mvnw verify -Pprod -DskipTests -Dmaven.repo.local=$MAVEN_USER_HOME
  artifacts:
    paths:
      - target/*.jar
  only:
    - schedules
  before_script:
    - echo "this job is going to package project"

docker-push:
  stage: deploy_to_dockerhub
  image: docker:latest
  services:
    - docker:dind
  variables:
    REGISTRY_URL: https://registry.hub.docker.com
    DOCKER_REPO: springboot
    DOCKER_DRIVER: overlay2
    IMAGE_TAG: "petclinic"
    APPLICATION_NAME: springbootapplication
  dependencies:
    - maven-package
  before_script:
    - docker info
    #- cp target/*.jar src/main/docker
    - ls
  only:
    - schedules
  script:
   # - docker build -f src/main/docker/Dockerfile -t $IMAGE_TAG src/main/docker/ --rm=false
    - docker build -t devopsbatch17/petclinic .
    - docker login -u $CI_REGISTRY_USER -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
   # - docker push registry.hub.docker.com/repository/docker/devopsbatch17/springboot
   # - docker push $REGISTRY_URL/$DOCKER_REPO:master:latest
   # - docker push https://registry.hub.docker.com/repository/docker/devopsbatch17/springboot:master:latest
   # - docker push master:latest
    - docker push devopsbatch17/petclinic:latest

k8s-deploy:
  stage: kubernetes-deploy
  image: google/cloud-sdk:latest
  except:
    - schedules
  services:
    - docker:dind
  script:
    - echo "$GOOGLE_KEY" > key.json
    - gcloud auth activate-service-account --key-file key.json
    - export GOOGLE_APPLICATION_CREDENTIALS="key.json"
    - gcloud config set compute/zone us-central1
    - gcloud config set project springboot-sample-265919
    #- gcloud config set container/use_client_certificate false
    - gcloud container clusters get-credentials springboot-cluster 
    - kubectl get ns
    #- kubectl delete secret registry.gitlab.com
    - kubectl create secret docker-registry registry.hub.docker.com --docker-server=https://registry.hub.docker.com --docker-username=$CI_REGISTRY_USER --docker-password=$CI_REGISTRY_PASSWORD --docker-email=devopsbatch17@gmail.com --dry-run -o yaml|kubectl apply -f -
    - kubectl apply -f deployment.yml
    - kubectl apply -f service-definition.yml